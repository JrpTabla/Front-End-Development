/* CSS Reset */
* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

/*Bootstrap Font*/
body {
	font-family: "Helvetica Neue", sans-serif;
}

.text-center {
	text-align: center;
}

.h-25 {
	height: 25%;
}

.p-3 {
	padding: 15px;
}

.bg-success {
	background-color: forestgreen;
}

.bg-warning {
	background-color: orange;
}

.bg-danger {
	background-color: darkred;
}


/*	CSS and Bootstrap Flexbox */

.d-flex{
	display: flex;
}

/* The "flex" value of the "display" property will change the element into a block-level flex container. This will make all the child elements become "flexible" that allows them to occupy space enough for the content of an element and at the same time will have the elements appear beside each other.*/


.justify-content-center{
	justify-content: center;
}

/*- The CSS "justify-content" property allows us to manipulate the positioning of elements horizontally.*/



.align-items-center{
	align-items: center;
}

/*The CSS "align-items" property may only be applied if the element has a "flex" value for it's "display" property. The "align-items-center" class will vertically center all child elements. There may be instances that align-items property may not work due to a lack of height on it's parent element.*/


.flex-column {
	flex-direction: column;
}

.flex-column-reverse {
	flex-direction: column-reverse;
}

/* 	The CSS "flex-direction" property allows us to manipulate	 the direction of how elements are positioned inside a 			flex container. The "column-reverse" value will display 	the elements vertically.*/

/* 	The "flex-column" class will display elements on top of 	each other. 

	A practical application of this might be to create a side navbar or centered items that should stack on top of each other.*/